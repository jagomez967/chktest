@using Reporting.ViewModels
@model ConfUsuarioVM

@{
    ViewBag.Title = Reporting.Resources.Tableros.lblMisDatosTitulo;
}

@section styles
{
    <style>
        .btn-table-row {
            padding: 5px;
        }

            .btn-table-row i {
                padding: 0;
            }
    </style>
}

<div class="container-fluid panel panel-default formulario-abm">

    @if (ViewBag.Success != null)
    {
        <div class="alert alert-success" role="alert">
            <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
            @Reporting.Resources.Tableros.lblLosDatosSeGuardaronExito
        </div>
    }

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger" role="alert">
            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            @Reporting.Resources.Tableros.errGuardarDatosUsuario
            @if (ViewBag.ErrorMessage != null)
            {
                <p>@ViewBag.ErrorMessage</p>
            }
            <p>@Html.ValidationMessage("Err_Imagen_FileType")</p>
            <p>@Html.ValidationMessage("Err_Imagen_FileSize")</p>
        </div>
    }

    <h1>@Reporting.Resources.Tableros.lblTituloMisDatosPerfil</h1>
    <h5>@Reporting.Resources.Tableros.lblSubTituloDatosPerfil</h5>
    <hr />

    @using (Html.BeginForm("MisDatos", "Tableros", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.HiddenFor(m => m.Email)
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <p>@Html.DisplayFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })</p>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.HiddenFor(m=>m.RolId)
                    @Html.LabelFor(model => model.RolId, htmlAttributes: new { @class = "control-label" })
                    <p><label class="label label-info">@Model.RoleList.First(u => u.Value == Model.RolId.ToString()).Text</label></p>
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.IdiomaId, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.IdiomaId, Model.Idiomas)
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Imagen, htmlAttributes: new { @class = "control-label" })
            <table>
                <tbody>
                    <tr>
                        <td style="padding:10px 20px 10px 10px">
                            <div class="imgperfil">
                                @Html.HiddenFor(m => m.Imagenb64)
                                <img src="data:image/png;base64,@Model.Imagenb64" onerror="this.src = '@Url.Content("~/images/perfil.jpg")';" />
                            </div>
                        </td>
                        <td>
                            <input type="file" class="form-control file-profile-img" name="Imagen" accept=".gif,.jpeg,.jpg,.pjpeg,.png" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.Nombre, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group">
            <input type="submit" value="@Reporting.Resources.Tableros.lblGuardarCambios" class="btn btn-primary" />
        </div>
    }
</div>



@section scripts{
    <script>
    $(document).ready(function () {
        $('body').on('click', '#tabShowHide', function () {
            var val = $('body, .slide-menu').css('left') === '200px' ? '0px' : '200px';
            var _padding = $('body, .slide-menu').css('left') != '200px' ? '200px' : '0px';
            $('body, .slide-menu').animate({ left: val }, 300);
            $("body").css('padding-right', _padding);
        });

        $('.chkEsCheckPos').bootstrapSwitch({
            size: 'mini',
            onText: "@Reporting.Resources.Tableros.lblYesNoYes",
                offText: "@Reporting.Resources.Tableros.lblYesNoNo"
            });

            $(".file-profile-img").change(function () {
                console.log('file input img');
                var val = $(this).val().toLowerCase();
                var regex = new RegExp("(.*?)\.(jpeg|jpg|png|gif|pjpeg)$");
                if (!(regex.test(val))) {
                    $(this).val('');
                    alert('@Reporting.Resources.Tableros.errImagenFormatoInvalido');
                return false;
            }

            console.log(this.files);
            var file = this.files[0];
            if (file.size > 512000) {
                alert('@Reporting.Resources.Tableros.errImagenSize500kb');
                return false;
            }

            readURLFoto(this);
        });

        function readURLFoto(input) {
            console.log('readURLFoto');
            if (input.files && input.files[0]) {
                console.log('qwertyui');
                var reader = new FileReader();

                reader.onload = function (e) {
                    $(input).parents('tr').find('.imgperfil img').attr('src', e.target.result);
                }
                console.log(input.files[0]);
                reader.readAsDataURL(input.files[0]);
            }
        }
    });
    </script>
}

